#ifndef __choth_PRO__
#define __choth_PRO__
 
/*
   Prototypes for directory : CHOTHIA
   Generated by williams on Thu Sep 30 14:29:23 BST" 1993
*/
 
int AddWeights(float *W, int *NWeight, int ResSt, int ResEnd, int NAtRes,  int Flag);
 
int CalcDet(float **Mat, float *Det, int N);
 
int CalcRotFit(float **EigVec, float *EigVal, float **R, float UDet);
 
int CalcUmatFit(float **a, float **b, int n, float *w, float **U);
 
void DumpMatrix(float **Mat,char *Name, int nlr, int nhr, int nlc, int nhc);
 
void DumpVector(float *Vec,char *Name, int nl, int nh);
 
void Eigsrt(float *d, float **v, int n);
 
int Jacobi(float **a, int n, float *d, float **v, int *nrot);
 
int LUDcmp(float **a, int n, int *indx, float *d);
 
int MakeOmegaFit(float **U, float **Omega);
 
int MakeWeights(float *W, int NAt, int Ranges[][2], int NRange, int LpStart, int LpEnd, int NAtRes);
 
int MoveCofGOrig(float **coord, int ncoord,float *CofG);
 
int PDB2Array(float **Coords, int MaxCd, PDB *PHead, int Ranges[][2],  int NRange, int *NAtom, int (*CompFunc)());
 
int ReadIgn(char *Fname, char *Struct, int *Flag);
 
int StructFit(float **a, float **b, int n, float *w,MATRIX *R, VECTOR *aCofGVec, VECTOR *bCofGVec);
 
void addloop(CHOTH *class,char *loop,char *name,char *matches,char *seq);
 
int allfunc(PDB *pdb);
 
int bbfunc(PDB *pdb);
 
int beststruct(CHOTH *class,char *sequence,MDM *matrix,char *pat,char *name, int IgnFlag, char *IgnName);
 
void cfile(FILE *fp,char *fname);
 
void chothiamain(int argc,char **argv);
 
int comp_res(char *string,char res);
 
void copypdb(PDB *from,PDB *to);
 
void dump_choth(CHOTH *classes,int nclass,char *loop);
 
void dump_pdb(PDB *head);
 
PDB *extractloop(char *path, char *name, int low, int high, char chain);
 
int findfirstres(char *sequence, int startpos, char *ress);
 
int findpdbres(PDB *head,int res,PDB **pos);
 
int findstructmatch(CHOTH *classes, int nclass, char *datpath, char chain);
 
float **fmatrix(int nrl,int nrh,int ncl,int nch);
 
void free_fmatrix(float **m,int nrl,int nrh,int ncl,int nch);
 
void free_ivector(int *VecP, int NBot, int NTop, char *Routine);
 
void free_pdb(PDB *head);
 
void free_vector(float *VecP, int NBot, int NTop, char *Routine);
 
int genmotifs(CHOTH *classes,int nclass);
 
int genpdbent(PDB *p,char *buffer);
 
int getclass(CHOTH *classes,int nclass,char *seq,char *name,char *matches);
 
int getcommand(FILE *fp,char *command,int showflag);
 
int getfirstresidue(PDB *head);
 
int getintopt(int *integ,char **out_pp,char *in_p);
 
int getinttok(int *integ,char **out_pp,char *in_p);
 
int getlastresidue(PDB *head);
 
int getnumclass(FILE *fp);
 
int getnumfseq(FILE *fp);
 
int getpatinfo(PATTERN *pathead,struct patinfo *patinf);
 
int getpdbrange(PDB *head,int begin,int end,int (*compfunc)(),PDB *range);
 
int gettok(char *str,char **out_pp,char *in_p);
 
int identity(char *seq1,char *seq2);
 
PATTERN *initpat(PATTERN *prevpat);
 
PDB *initpdb(PDB *pdb);
 
int inv_res(char temp1[25],char temp2[25]);
 
int *ivector(int NBot, int NTop, char *Routine);
 
int loopseq(char *sequence, int low, int high,char *loop);
 
int matcher(char *sequence, PATTERN *pathead, char *match);
 
int matchstruct(CHOTH *classes,int nclass,STRUCT *str);
 
FILE *opfile(char *fname,char *stat);
 
void overlaplsq(int ranges[2][2],int nternum,int cternum,PDB *loop,PDB *frame);
 
int pat_match(PATTERN *pat, int startpos, char *sequence, char *matchres, int matchpos,int *recurlev);
 
PATTERN *patpars(char pattern[MAXSTRLEN]);
 
int pdbmult(PDB *head, MATRIX *matrix);
 
void readbldflags(char *path, char *fname, CONFIG *conf);
 
void readchoice(char *filename, char *frame);
 
CHOTH *readclasses(CONFIG *conf, int ichain, int ifrag, char *path, int *nclass);
 
STRUCT *readframe(char *fname,int *nseq);
 
int readmdm(char *path,char *name,MDM *matrix);
 
PDB *readpdb(char *filename) ;
 
int readseq(char *path, char *name, char *sequence);
 
int seqlength(char *sequence, int lower, int upper);
 
int splicepdb(PDB *thead, PDB *shead);
 
int splicepdbframe(PDB *thead, PDB *shead,int begin,int end);
 
int stripnewline(char *str);
 
void transpdb(PDB *head,VECTOR *transvec);
 
float *vector(int NBot, int NTop, char *Routine);
 
void writepdb(PDB *head, char *path, char *name);
 
void writereport(CONFIG *conf);
 
void wrterror(int errorno,char *routine,char *extra);
 
 
#endif
