head	1.1;
access;
symbols;
locks
	martin:1.1; strict;
comment	@ * @;


1.1
date	2006.02.17.12.04.58;	author martin;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include "ProtoTypes.h"
#include "CongenProto.h"
 
/***************************************************************
      Andrew C.R. Martin                            23.06.90
 
      Laboratory of Mathematical Biology            V1.1
      National Institue for Medical Research,
      The Ridgeway,
      Mill Hill,
      London,
      NW7 1AA
****************************************************************
   indexi(n,arrin,indx)
   Input:  n      int      Number of elements in array
           arrin  *int     Array to be indexed
   Output: indx   *int     Index array
 
   This routine uses a heapsort to index an int array
   such that arrin[indx[j]] is in ascending order with j.
   It is modified from the FORTRAN version in 'Numerical Recipes'
   Page 233. This version correctly sorts from array element 0
   as opposed to 1 in the FORTRAN version.
****************************************************************
   V1.1 24.07.91 Fixed bugs. Basically didn't work before!
****************************************************************/
 
void indexi(
int n,
int *arrin,
int *indx
)
{
   int i, j, l, ir, indxt, q;
 
   for(j=0; j<n; j++) indx[j] = j;
   l = n/2 + 1;
   ir = n;
 
   for(;;)
   {
      if(l>1)
      {
         l--;
         indxt = indx[l-1];
         q = arrin[indxt];
      }
      else
      {
         indxt = indx[ir-1];
         q = arrin[indxt];
         indx[ir-1] = indx[0];
         ir--;
         if(ir==1)
         {
            indx[0] = indxt;
            return;
         }
      }
      i = l;
      j = l+l;
      while(j<=ir)
      {
         if(j<ir)
            if(arrin[indx[j-1]] < arrin[indx[j]]) j++;
         if(q<arrin[indx[j-1]])
         {
            indx[i-1] = indx[j-1];
            i=j;
            j+=j;
         }
         else
         {
            j=ir+1;
         }
      }
      indx[i-1] = indxt;
   }
   return;
}
 
@
