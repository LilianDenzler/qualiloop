head	1.1;
access;
symbols;
locks
	martin:1.1; strict;
comment	@ * @;


1.1
date	2006.02.17.12.04.20;	author martin;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef __PROTO_PRO__
#define __PROTO_PRO__
 
/*
   Prototypes for directory : ABM_FRAME
   Generated by williams on Fri May 21 17:57:25 BST 1993
*/
 
int framemain(int argc, char *argv[]);
void link_table(void);
int get_residue(char *name_db, char *resnam, float B[100][4]);
void mallinf(void);
void print_loops(int loops[6][2], PDB *pl, PDB *ph);
void read_link(char *name_link, int link[20][20]);
void read_loops(char *name_loops, int loops[6][2]);
PDB *read_pdb(char *name);
void read_vdw(char *datafile, float radii[30][3]);
void write_crd( PDB *pt, char *name_out);
void write_pdb(PDB *pt, char *name_out, CONFIG *conf);
void write_qdb(PDB *pt, char *name_out, CONFIG *conf);
PDB *copy_pdb(PDB *pdb);
void error_coord(PDB *r);
void fill_atoms(PDB *ptf,char *name_atm,char *resityp, int il);
void free_pdb(PDB *p);
void copy_coor(int na, int p, float A[100][4], float C[100][4]);
void splice_coor(int nc, int p, float A[100][4], float C[100][4]);
void insert(PDB *ptf, PDB *ptl, char *resityp, float A[100][4], int a, int t, int il);
void insert_del_residue(PDB *r);
void insert_dummy(CONFIG *conf, int chn, char *seq, char *name_db, char *name_atom,PDB *pstart, int il);
PDB *getnextres(PDB *pdb);
void GetLoop(int nloop,int loops[][2],char *buffer,char *seq);
void insert_fli(PDB **ptf,PDB *ptl,char *resityp,float A[100][4],int a,int t);
void rot_x(float R[3][3], float angle);
void rot_y(float R[3][3],float angle);
void rot_z( float R[3][3], float angle);
void omega(float U[3][3], float E_vec[6][6], float E_val[6][6], int il);
void eigensort(float E_val[6][6], float E_vec[6][6], float D[3], float v[6][3]);
void mul6(float a[6][6],float b[6][6],float r[6][6]);
void mulvec(float a[3], float b[3], float r[3]);
void place(char *name_fitl, char *name_fith, PDB *ptfl, PDB *ptfh, int il);
void Rcalc(float v[6][3], float R[3][3], float U_det[1], int il);
void rotate(float R[3][3], float B[100][4], int b);
void rotatep(float R[3][3], PDB *pfa);
void rotate_coor(float R[3][3], float B[100][4], int b);
void Umat(float B[100][4], float A[100][4], int c, float weights[100], float U[3][3], float U_det[1]);
void Umat1(float B[100][4], float A[100][4], float weights[100], float U[3][3], float U_det[1], int nchi);
void Umatp(PDB *pfa, PDB *pfb, int regions[10], int n, float U[3][3], float U_det[1]);
void Umatp_ca(PDB *pfa, PDB *pfb, float U[3][3], float U_det[1]);
void atom_center(float A[100][4], int a, int n, float Tn[3]);
void center_mass(float A[100][4], float B[100][4], float Ta[3], float Tb[3], int a, int b);
void center_geom(float A[100][4], float B[100][4], float Ta[3], float Tb[3], int a, int b);
void center_geom1(float A[100][4], float B[100][4], float Ta[3], float Tb[3], int a, int b, int nchi);
void center_geomp(PDB *pta, PDB *ptb, int regions[10], int n, float Ta[3], float Tb[3]);
void center_geomp_ca(PDB *pta, PDB *ptb, float Ta[3], float Tb[3]);
void chi_calc(float A[100][4], float B[100][4], int n, float chis[4][3], int il);
int chi_link(int link[20][20], char *resi1, char *resi2, int il);
void cr(void);
float distance(float x1, float y1, float z1, float x2, float y2, float z2);
void itoa(int n, char *s);
float length(float R[3]);
int mass(char *atom);
void merge(float A[100][4], float B[100][4]);
void one_to_three(char *one_code, char *three_c);
void polar_angle(float a1, float a2, float a3, float r[2], int il);
void reverse(char *s);
int sign(float v);
void three_to_one(char *three_c, char *one_code);
float torr( float a1, float a2, float a3, float b1, float b2, float b3, float c1, float c2, float c3, float d1, float d2, float d3);
void translate(float A[100][4], float T[3], int  a);
void translatep(PDB *p, float T[3]);

FRAGCONF *inloop(CONFIG *conf, int num, int chn);
void FRMReadCanRep(CONFIG *conf);
CONFIG *FRMReadConfig(char *AbMDirPath);
void FRMSetDummy(CONFIG *ConfPtr, PDB *PDBnew, PDB *PDBptn);


 
#endif
@
